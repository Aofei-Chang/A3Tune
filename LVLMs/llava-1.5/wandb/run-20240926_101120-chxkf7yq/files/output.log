  0%|                                                                                                                                                                                                                                                                   | 0/675 [00:00<?, ?it/s]/data/aofei/conda/env/llava_v1.5/lib/python3.10/site-packages/torch/utils/checkpoint.py:429: UserWarning: torch.utils.checkpoint: please pass in use_reentrant=True or use_reentrant=False explicitly. The default value of use_reentrant will be updated to be False in the future. To maintain current behavior, pass use_reentrant=True. It is recommended that you use use_reentrant=False. Refer to docs for more details on the differences between the two variants.
  warnings.warn(
/data/aofei/conda/env/llava_v1.5/lib/python3.10/site-packages/torch/utils/checkpoint.py:61: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn(
/data/aofei/conda/env/llava_v1.5/lib/python3.10/site-packages/deepspeed/runtime/zero/stage_1_and_2.py:1652: UserWarning: The torch.cuda.*DtypeTensor constructors are no longer recommended. It's best to use methods such as torch.tensor(data, dtype=*, device='cuda') to create tensors. (Triggered internally at ../torch/csrc/tensor/python_tensor.cpp:83.)
  total_norm_cuda = get_accelerator().FloatTensor([float(total_norm)])
  4%|███████████▋                                                                                                                                                                                                                                                          | 30/675 [00:37<13:00,  1.21s/it]
{'loss': 1.5292, 'learning_rate': 9.523809523809523e-06, 'epoch': 0.0}
{'loss': 1.5421, 'learning_rate': 1.9047619047619046e-05, 'epoch': 0.01}
{'loss': 1.0906, 'learning_rate': 2.857142857142857e-05, 'epoch': 0.01}
{'loss': 1.64, 'learning_rate': 3.809523809523809e-05, 'epoch': 0.02}
{'loss': 1.2465, 'learning_rate': 4.761904761904762e-05, 'epoch': 0.02}
{'loss': 0.8914, 'learning_rate': 5.714285714285714e-05, 'epoch': 0.03}
{'loss': 0.1533, 'learning_rate': 6.666666666666667e-05, 'epoch': 0.03}
{'loss': 0.2441, 'learning_rate': 7.619047619047618e-05, 'epoch': 0.04}
{'loss': 0.4502, 'learning_rate': 8.571428571428571e-05, 'epoch': 0.04}
{'loss': 0.0743, 'learning_rate': 9.523809523809524e-05, 'epoch': 0.04}
{'loss': 0.2358, 'learning_rate': 0.00010476190476190477, 'epoch': 0.05}
{'loss': 0.1656, 'learning_rate': 0.00011428571428571428, 'epoch': 0.05}
{'loss': 0.0923, 'learning_rate': 0.0001238095238095238, 'epoch': 0.06}
{'loss': 0.0426, 'learning_rate': 0.00013333333333333334, 'epoch': 0.06}
{'loss': 0.0147, 'learning_rate': 0.00014285714285714287, 'epoch': 0.07}
{'loss': 0.0188, 'learning_rate': 0.00015238095238095237, 'epoch': 0.07}
{'loss': 0.6752, 'learning_rate': 0.00016190476190476192, 'epoch': 0.08}
{'loss': 0.0003, 'learning_rate': 0.00017142857142857143, 'epoch': 0.08}
{'loss': 0.2503, 'learning_rate': 0.00018095238095238095, 'epoch': 0.08}
{'loss': 0.022, 'learning_rate': 0.00019047619047619048, 'epoch': 0.09}
{'loss': 0.1488, 'learning_rate': 0.0002, 'epoch': 0.09}
{'loss': 0.0743, 'learning_rate': 0.00019999884624547333, 'epoch': 0.1}
{'loss': 0.0583, 'learning_rate': 0.00019999538500851635, 'epoch': 0.1}
{'loss': 0.0362, 'learning_rate': 0.00019998961636899734, 'epoch': 0.11}
{'loss': 0.0029, 'learning_rate': 0.00019998154046002822, 'epoch': 0.11}
{'loss': 0.0753, 'learning_rate': 0.00019997115746796132, 'epoch': 0.12}
{'loss': 0.0016, 'learning_rate': 0.00019995846763238512, 'epoch': 0.12}
{'loss': 0.0026, 'learning_rate': 0.00019994347124611874, 'epoch': 0.12}
{'loss': 0.2156, 'learning_rate': 0.00019992616865520515, 'epoch': 0.13}
{'loss': 0.2316, 'learning_rate': 0.00019990656025890315, 'epoch': 0.13}
